function ascendant(){
    var path = new CompoundPath();
    path.moveTo([8.707, 0.0]);
    path.cubicCurveTo([9.422, 1.473], [8.492, 3.59], [8.297, 5.043]);
    path.lineTo([1.801, 37.008]);
    path.cubicCurveTo([1.363, 38.441], [0.762, 39.438], [0.0, 40.0]);
    path.lineTo([5.645, 40.0]);
    path.cubicCurveTo([4.727, 39.012], [4.465, 37.551], [4.863, 35.609]);
    path.lineTo([7.629, 23.363]);
    path.lineTo([15.617, 23.363]);
    path.lineTo([18.797, 36.637]);
    path.cubicCurveTo([19.012, 38.102], [18.914, 39.223], [18.5, 40.0]);
    path.lineTo([25.707, 40.0]);
    path.cubicCurveTo([24.691, 38.797], [23.992, 37.582], [23.605, 36.355]);
    path.lineTo([14.355, 0.0]);
    path.lineTo([8.707, 0.0]);
    path.moveTo([23.844, 0.375]);
    path.cubicCurveTo([20.828, 1.141], [19.605, 3.695], [20.18, 8.039]);
    path.lineTo([20.422, 8.598]);
    path.lineTo([20.902, 9.719]);
    path.cubicCurveTo([21.156, 9.969], [21.355, 10.219], [21.5, 10.469]);
    path.cubicCurveTo([21.836, 10.684], [22.094, 10.934], [22.281, 11.215]);
    path.cubicCurveTo([22.668, 11.445], [22.988, 11.723], [23.242, 12.055]);
    path.lineTo([23.363, 12.148]);
    path.lineTo([23.723, 12.523]);
    path.cubicCurveTo([24.359, 12.969], [24.859, 13.531], [25.227, 14.207]);
    path.cubicCurveTo([25.645, 15.348], [25.785, 16.5], [25.645, 17.664]);
    path.cubicCurveTo([25.09, 19.148], [24.289, 19.801], [23.242, 19.625]);
    path.cubicCurveTo([21.742, 19.098], [20.621, 17.602], [19.879, 15.141]);
    path.lineTo([19.879, 19.906]);
    path.cubicCurveTo([20.98, 20.895], [22.102, 21.422], [23.242, 21.496]);
    path.cubicCurveTo([26.301, 21.484], [27.961, 19.336], [28.227, 15.047]);
    path.cubicCurveTo([28.129, 13.789], [27.867, 12.699], [27.449, 11.777]);
    path.cubicCurveTo([27.199, 11.496], [27.02, 11.215], [26.906, 10.934]);
    path.lineTo([26.727, 10.746]);
    path.lineTo([26.547, 10.652]);
    path.lineTo([25.586, 9.719]);
    path.cubicCurveTo([25.266, 9.5], [25.004, 9.254], [24.805, 8.973]);
    path.cubicCurveTo([23.902, 8.371], [23.184, 7.559], [22.645, 6.543]);
    path.cubicCurveTo([22.137, 3.645], [22.836, 2.148], [24.746, 2.055]);
    path.cubicCurveTo([26.066, 2.574], [27.008, 3.727], [27.566, 5.516]);
    path.lineTo([27.566, 1.402]);
    path.lineTo([27.449, 1.309]);
    path.cubicCurveTo([27.281, 1.227], [27.141, 1.133], [27.027, 1.027]);
    path.lineTo([26.848, 1.027]);
    path.cubicCurveTo([26.621, 0.883], [26.379, 0.789], [26.125, 0.746]);
    path.cubicCurveTo([25.805, 0.582], [25.504, 0.488], [25.227, 0.469]);
    path.lineTo([24.984, 0.469]);
    path.cubicCurveTo([24.59, 0.352], [24.25, 0.32], [23.965, 0.375]);
    path.lineTo([23.902, 0.375]);
    path.lineTo([23.965, 0.375]);
    path.lineTo([23.844, 0.375]);
    path.lineTo([23.902, 0.375]);
    path.lineTo([23.844, 0.375]);
    path.moveTo([34.836, 0.375]);
    path.cubicCurveTo([31.391, 1.109], [29.371, 3.945], [28.77, 8.879]);
    path.cubicCurveTo([28.289, 14.184], [29.41, 18.047], [32.133, 20.469]);
    path.cubicCurveTo([34.895, 22.242], [37.355, 21.684], [39.52, 18.785]);
    path.lineTo([39.52, 18.504]);
    path.lineTo([39.578, 18.129]);
    path.lineTo([39.699, 17.477]);
    path.lineTo([39.758, 17.289]);
    path.cubicCurveTo([39.812, 16.699], [39.895, 16.199], [40.0, 15.793]);
    path.cubicCurveTo([39.965, 15.68], [39.926, 15.617], [39.879, 15.609]);
    path.cubicCurveTo([37.891, 19.406], [35.711, 20.281], [33.332, 18.223]);
    path.cubicCurveTo([31.445, 15.73], [30.805, 12.18], [31.41, 7.57]);
    path.cubicCurveTo([31.812, 4.477], [32.895, 2.668], [34.656, 2.148]);
    path.cubicCurveTo([36.578, 1.941], [38.117, 3.438], [39.277, 6.637]);
    path.lineTo([39.277, 1.871]);
    path.lineTo([39.098, 1.777]);
    path.lineTo([38.98, 1.684]);
    path.cubicCurveTo([38.652, 1.516], [38.371, 1.328], [38.137, 1.121]);
    path.cubicCurveTo([37.711, 1.008], [37.371, 0.883], [37.117, 0.746]);
    path.cubicCurveTo([36.797, 0.633], [36.535, 0.57], [36.336, 0.563]);
    path.cubicCurveTo([35.715, 0.395], [35.215, 0.332], [34.836, 0.375]);
    path.moveTo([11.352, 6.449]);
    path.cubicCurveTo([11.457, 6.594], [12.621, 11.203], [14.836, 20.281]);
    path.lineTo([8.227, 20.281]);
    path.lineTo([11.352, 6.449]);
    return {name:"ascendant",width:40, height:40,path:path};
}
